% close all
% clear all
% addpath(fullfile(fileparts(mfilename('fullpath')), '..'))
% 
% % Settings 
% want_psytoolbox = false; 
% 
% % noise parameters
% const.native_noise_dim = [1080, 1080];
% const.noise_dpp = 0.01; % degree per pixel
% 
% % Spatial frequency filter paramaters
% gauss_mu = 2;
% gauss_sigma = 5;
% 
% % Orientation filter parameters
% kappa = 0.1;
% const.native_noise_orientation = 45;
% 
% % Contrast filter
% mc_contrast = 1; % Michelson contrast
% 
% % Call the genNoisePatch function
% noiseMatFiltNorm = genNoisePatch(const, gauss_mu, gauss_sigma, kappa, mc_contrast, 5);
% 
% 
% % plot with Psychtoolbox
% if want_psytoolbox
%     % Initialisation de Psychtoolbox
%     Screen('Preference', 'SkipSyncTests', 1); % Ignore sync tests
%     Screen('Preference', 'SuppressAllWarnings', 1); % Suppress all warnings
% 
%     % Obtenir les indices des écrans disponibles
%     screens = Screen('Screens');
% 
%     % Sélectionner le deuxième écran (index le plus élevé)
%     screenNumber = max(screens);
% 
%     % Ouvrir une fenêtre sur le deuxième écran
%     [window, windowRect] = PsychImaging('OpenWindow', screenNumber, [0 0 0]);
% 
%     % Dimensions de l'écran
%     [screenXpixels, screenYpixels] = Screen('WindowSize', window);
% 
%     % Création de la texture Psychtoolbox
%     noiseTexture = Screen('MakeTexture', window, noiseMatFiltNorm * 255);
% 
%     % Dessin du bruit sur l'écran
%     Screen('DrawTexture', window, noiseTexture, [], []);
% 
%     % Affichage de l'écran
%     Screen('Flip', window);
% 
%     % Attendre une touche pour fermer
%     KbStrokeWait;
% 
%     % Fermer la fenêtre et nettoyer
%     Screen('CloseAll');
% 
% % regular plot
% else 
%     % Noise figure 
%     figure;
%     imshow(noiseMatFiltNorm, []);
%     colormap(gray); 
%     caxis([0, 1]); 
% 
%     % ======= Compute and display the Fourier spectrum =======
% 
%     % Compute the 2D Fourier Transform
%     F = fft2(noiseMatFiltNorm);
% 
%     % Shift the zero frequency component to the center
%     F_shifted = fftshift(F);
% 
%     % Compute the magnitude (amplitude) in logarithmic scale
%     S = log(1 + abs(F_shifted));
% 
%     % Display the Fourier spectrum
%     figure;
%     imagesc(S);
%     colormap gray;
%     colorbar;
%     axis image;
%     title('Fourier Spectrum');
%     xlabel('Spatial Frequency in X');
%     ylabel('Spatial Frequency in Y');
% 
% 
% end

% close all; 
clear all;

% Paramètres principaux
const.native_noise_dim = [1080, 1080];  % Taille de l'image
const.noise_dpp = 0.1;  % Degré par pixel
const.native_noise_orientation = 45;  % Orientation préférée en degrés

% Paramètres du filtre de fréquence spatiale
gauss_mu = 2;  % Fréquence centrale en cpd
gauss_sigma = 0.1;  % Écart type en log10 de la fréquence spatiale
kappa = 100;  % Dispersion du filtre de von Mises
mc_contrast = 1;  % Contraste de Michelson
seed = 42;  % Graine pour le processus aléatoire

% Générer le bruit filtré
filtered_contrastedNoise = genNoisePatch(const, gauss_mu, gauss_sigma, kappa, mc_contrast, seed);

% % plot with Psychtoolbox
% if want_psytoolbox
%     % Initialisation de Psychtoolbox
%     Screen('Preference', 'SkipSyncTests', 1); % Ignore sync tests
%     Screen('Preference', 'SuppressAllWarnings', 1); % Suppress all warnings
% 
%     % Obtenir les indices des écrans disponibles
%     screens = Screen('Screens');
% 
%     % Sélectionner le deuxième écran (index le plus élevé)
%     screenNumber = max(screens);
% 
%     % Ouvrir une fenêtre sur le deuxième écran
%     [window, windowRect] = PsychImaging('OpenWindow', screenNumber, [0 0 0]);
% 
%     % Dimensions de l'écran
%     [screenXpixels, screenYpixels] = Screen('WindowSize', window);
% 
%     % Création de la texture Psychtoolbox
%     noiseTexture = Screen('MakeTexture', window, noiseMatFiltNorm * 255);
% 
%     % Dessin du bruit sur l'écran
%     Screen('DrawTexture', window, noiseTexture, [], []);
% 
%     % Affichage de l'écran
%     Screen('Flip', window);
% 
%     % Attendre une touche pour fermer
%     KbStrokeWait;
% 
%     % Fermer la fenêtre et nettoyer
%     Screen('CloseAll');
% 
% % regular plot
% else 

% Afficher le stimulus
figure;
imshow(filtered_contrastedNoise, []);
colormap(gray); % Palette de couleurs en niveaux de gris
caxis([0, 1]); % Ajuster l'échelle des couleurs
title('Image de bruit filtrée');

% ---- SPECTRE DE FOURIER ----

% Calculer le spectre de Fourier du bruit filtré
filteredNoise_fft = fftshift(fft2(filtered_contrastedNoise));

% Afficher le spectre de Fourier
figure;
imshow(log(1 + abs(filteredNoise_fft)), []);
xlabel('Fréquence horizontale (cycles par degré)');
ylabel('Fréquence verticale (cycles par degré)');
title('Spectre de Fourier après filtrage');

% ---- HISTOGRAMME DE LA DISTRIBUTION DES FRÉQUENCES SPATIALES ----

% Définition des bins pour l'histogramme
nb_bins = 100;  
[x, y] = meshgrid(-const.native_noise_dim(2)/2:const.native_noise_dim(2)/2-1, -const.native_noise_dim(1)/2:const.native_noise_dim(1)/2-1);
x = x / (const.native_noise_dim(2) * const.noise_dpp);  % Convertir en cpd
y = y / (const.native_noise_dim(1) * const.noise_dpp);
r = sqrt(x.^2 + y.^2);  % Fréquence radiale en cycles par degré (cpd)

max_cpd = max(r(:));  
edges_cpd = linspace(0, max_cpd, nb_bins+1);  
bin_centers_cpd = (edges_cpd(1:end-1) + edges_cpd(2:end)) / 2;  

% Calcul de la distribution des amplitudes en fonction des fréquences spatiales
amplitude_distribution_cpd = accumarray(discretize(r(:), edges_cpd), abs(filteredNoise_fft(:)), [nb_bins, 1]);  

% Normalisation en pourcentage
proportion_distribution_cpd = (amplitude_distribution_cpd / sum(amplitude_distribution_cpd)) * 100;  

% Affichage de l'histogramme des fréquences spatiales
figure;
bar(bin_centers_cpd, proportion_distribution_cpd, 'hist');
set(gca, 'XScale', 'log');  % Échelle logarithmique sur l'axe des X
xlabel('Fréquence spatiale (cycles par degré)');
ylabel('Proportion des fréquences (%)');
title('Histogramme des fréquences spatiales après filtrage');
xlim([0 10]);  % Plage des fréquences affichées

% Mise à jour des ticks pour une meilleure lisibilité
xt = get(gca, 'XTick');  
set(gca, 'XTickLabel', arrayfun(@(x) sprintf('%.2f', x), xt, 'UniformOutput', false));
